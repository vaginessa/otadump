name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "README.md"
  push:
    paths-ignore:
      - "README.md"

jobs:
  ci:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:

          # Linux Targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          
          # Darwin targets
          - os: macos-latest
            target: x86_64-apple-darwin
        # - os: macos-latest
        #   target: aarch64-apple-darwin

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            triplet: x64-windows-static-md
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            triplet: arm64-windows-static-md

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install xz, protobuf on MacOS
        if: runner.os == 'macOS'
        run: brew install xz protobuf

      - name: Install cmake on Windows
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@latest

      - name: Install protoc on Windows
        if: runner.os == 'Windows'
        uses: arduino/setup-protoc@v3
        with:
          version: "26.x" # https://github.com/protocolbuffers/protobuf/releases/latest

      - name: Install vcpkg on Windows
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:                # https://github.com/microsoft/vcpkg/releases/latest
          vcpkgGitCommitId: 'a34c873a9717a888f58dc05268dea15592c2f0ff' # 2024.03.25

      - name: Install liblzma on Windows
        if: runner.os == 'Windows'
        run: |
          ${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/vcpkg.exe install liblzma --triplet ${{ matrix.triplet }}

      - name: Build binary for Windows, MacOS
        if: runner.os != 'Linux'
        run: cargo build --release --locked --target=${{ matrix.target }} --color=always --verbose

      - name: Build binary for Linux
        if: runner.os == 'Linux'
        run: |
          cargo install cross
          cross build --release --locked --target=${{ matrix.target }} --color=always --verbose

      - name: Check code formatting
        continue-on-error: true
        run: cargo fmt --all -- --check
        
      - name: Run clippy (Linux)
        if: runner.os == 'Linux'
        continue-on-error: true
        run: |
          sudo apt install -y protobuf-compiler
          cargo clippy -- -D warnings
          
      - name: Run clippy (Windows, MacOS)
        if: runner.os != 'Linux'
        continue-on-error: true
        run: cargo clippy -- -D warnings

      - name: Package for Linux, MacOS
        if: runner.os != 'Windows' && github.repository == 'topminipie/otadump'
        run: >
          tar -cv
          LICENSE README.md
          -C target/${{ matrix.target }}/release/ otadump
          | gzip --best
          > 'otadump-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz'
          
      - name: Package for Windows
        if: runner.os == 'Windows' && github.repository == 'topminipie/otadump'
        run: >
          7z a 'otadump-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.zip'
          LICENSE README.md
          ./target/${{ matrix.target }}/release/otadump.exe
          
      - name: Upload
        if: github.repository == 'topminipie/otadump'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip
      
